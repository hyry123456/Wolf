
#define MAX_OTHER_LIGHT_COUNT 64

#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"

TEXTURE2D(_GBufferDepthTex);
SAMPLER(sampler_point_clamp);

float4 _ZBufferParams;


CBUFFER_START(_CustomLight)
	int _OtherLightCount;
	float4 _OtherLightColors[MAX_OTHER_LIGHT_COUNT];
	float4 _OtherLightPositions[MAX_OTHER_LIGHT_COUNT];
	float4 _OtherLightDirectionsAndMasks[MAX_OTHER_LIGHT_COUNT];
	float4 _OtherLightSpotAngles[MAX_OTHER_LIGHT_COUNT];
	float4 _OtherLightShadowData[MAX_OTHER_LIGHT_COUNT];
CBUFFER_END

struct ClusterData
{
    float3 p0, p1, p2, p3, p4, p5, p6, p7;
};

struct LightArray {
	int lightArray[64];
};


struct ComputeShaderInput
{
	uint3 GroupID           : SV_GroupID;           // 3D index of the thread group in the dispatch.
	uint3 GroupThreadID     : SV_GroupThreadID;     // 3D index of local thread ID in a thread group.
	uint3 DispatchThreadID  : SV_DispatchThreadID;  // 3D index of global thread ID in the dispatch.
	uint  GroupIndex        : SV_GroupIndex;        // Flattened local index of the thread within a thread group.
};

#pragma kernel CSMain

float4x4 _ViewFrustumCorners;	//x=buttomLeft, y=buttomRight, z=topRight, w=topLeft
RWStructuredBuffer<ClusterData> _ClusterDataBuffer;
RWStructuredBuffer<int> _ClusterCountBuffer;
RWStructuredBuffer<LightArray> _ClusterArrayBuffer;

uint _CL_CountX;
uint _CL_CountY;
uint _CL_CountZ;

uint3 ClusterCount1DTo3D(uint id) {
	uint z = id / (_CL_CountX * _CL_CountY);					//Z跨过的个数
	uint y = (id % (_CL_CountX * _CL_CountY)) / _CL_CountX;		//Y跨过的个数
	uint x = (id % (_CL_CountX * _CL_CountY)) % _CL_CountX;
	return uint3(x, y, z);
}


[numthreads(1024, 1, 1)]
void CSMain (ComputeShaderInput input)
{
	uint clusterIndex1D = input.DispatchThreadID.x;
	uint3 index3D = ClusterCount1DTo3D(clusterIndex1D);

	float3 ratio3D = index3D / float3(_CL_CountX, _CL_CountY, _CL_CountZ);
	float3 ratioAdd3D = uint3(index3D.x + 1, index3D.y + 1, index3D.z + 1)
		/ float3(_CL_CountX, _CL_CountY, _CL_CountZ);

	float3 buttomLeft = lerp(_ViewFrustumCorners[0].xyz, _ViewFrustumCorners[2].xyz, ratio3D);
	float3 buttomRight = lerp(_ViewFrustumCorners[0].xyz, _ViewFrustumCorners[2].xyz, float3(ratioAdd3D.x, ratio3D.y, 1));
	float3 topLeft = lerp(_ViewFrustumCorners[0].xyz, _ViewFrustumCorners[2].xyz, float3(ratio3D.x, ratioAdd3D.y, 1));
	float3 topRight = lerp(_ViewFrustumCorners[0].xyz, _ViewFrustumCorners[2].xyz, float3(ratioAdd3D.x, ratioAdd3D.y, 1));

	
	ClusterData data;
	data.p0 = buttomLeft * ratio3D.z;
	data.p1 = buttomLeft * ratioAdd3D.z;
	data.p2 = topLeft * ratioAdd3D.z;
	data.p3 = topLeft * ratio3D.z;
	data.p4 = buttomRight * ratio3D.z;
	data.p5 = buttomRight * ratioAdd3D.z;
	data.p6 = topRight * ratioAdd3D.z;
	data.p7 = topRight * ratio3D.z;

	_ClusterDataBuffer[clusterIndex1D] = data;
}

float Square(float x) {
	return x * x;
}

//检查点是否在灯光范围
bool CheckPositionInLight(float3 pos, int lightIndex) {
	float4 lightPos = _OtherLightPositions[lightIndex];
	float3 ray = lightPos.xyz - pos;
	float disSqr = dot(ray, ray);
	if (disSqr < (1 / lightPos.w))
		return true;
	return false;

	float rangeAtt = Square(
		saturate(1.0 - Square(disSqr * lightPos.w))
	);
	float4 spotAngles = _OtherLightSpotAngles[lightIndex];
	float3 spotDir = _OtherLightDirectionsAndMasks[lightIndex].xyz;
	float spotAtt = Square(
		saturate(dot(spotDir, normalize(ray) ) *
		spotAngles.x + spotAngles.y)
	);
	float att = spotAtt * rangeAtt / disSqr;
	if (att > 0.0000001)
		return true;
	return false;
}

#pragma kernel ReadyLight

float4x4 _ViewToWorldMat;

[numthreads(1024, 1, 1)]
void ReadyLight(ComputeShaderInput input)
{
	uint clusterIndex1D = input.DispatchThreadID.x;

	ClusterData data = _ClusterDataBuffer[clusterIndex1D];


	data.p0 = mul(_ViewToWorldMat, float4(data.p0, 1)).xyz;
	data.p1 = mul(_ViewToWorldMat, float4(data.p1, 1)).xyz;
	data.p2 = mul(_ViewToWorldMat, float4(data.p2, 1)).xyz;
	data.p3 = mul(_ViewToWorldMat, float4(data.p3, 1)).xyz;
	data.p4 = mul(_ViewToWorldMat, float4(data.p4, 1)).xyz;
	data.p5 = mul(_ViewToWorldMat, float4(data.p5, 1)).xyz;
	data.p6 = mul(_ViewToWorldMat, float4(data.p6, 1)).xyz;
	data.p7 = mul(_ViewToWorldMat, float4(data.p7, 1)).xyz;

	int size = 0;
	for (int i = 0; i < _OtherLightCount; i++) {
		if (CheckPositionInLight(data.p0, i) ||
			CheckPositionInLight(data.p1, i) ||
			CheckPositionInLight(data.p2, i) ||
			CheckPositionInLight(data.p3, i) ||
			CheckPositionInLight(data.p4, i) ||
			CheckPositionInLight(data.p5, i) ||
			CheckPositionInLight(data.p6, i) ||
			CheckPositionInLight(data.p7, i)
			)
		{
			_ClusterArrayBuffer[clusterIndex1D].lightArray[size++] = i;
		}
	}
	_ClusterCountBuffer[clusterIndex1D] = size;
}
